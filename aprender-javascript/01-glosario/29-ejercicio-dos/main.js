
/* SUPER EJERCICIO: Gestor de Contactos
Descripci√≥n:
Crea una aplicaci√≥n web que te permita a√±adir, mostrar y eliminar tus contactos 
favoritos. Cada contacto debe incluir:
Nombre
N√∫mero de Tel√©fono
Correo Electr√≥nico
Fecha de Creaci√≥n (se establece autom√°ticamente al guardar el contacto)
 */

/* Formulario de Entrada:
Crea un formulario en HTML que permita al usuario ingresar el nombre, tel√©fono y correo electr√≥nico.
El formulario debe tener un bot√≥n para agregar el contacto.

Guardar Contactos:
Desarrolla una funci√≥n que, al enviar el formulario, cree un objeto con los datos 
del contacto.
Agrega autom√°ticamente la fecha de creaci√≥n (puedes formatearla usando
new Date().toLocaleString()).
Guarda el objeto en un array de contactos y almacena dicho array en localStorage.clear

Mostrar Contactos:
Implementa una funci√≥n que recupere el array de contactos desde localStorage y
los muestre en el DOM.
En lugar de una tabla, muestra cada contacto en una "tarjeta" 
(por ejemplo, un <div> con estilo) que contenga:
Nombre
Tel√©fono
Correo Electr√≥nico
Fecha de Creaci√≥n

Un bot√≥n de "Eliminar" para quitar ese contacto.
Organiza las tarjetas en un contenedor con un dise√±o de grid o flex (para que se vean como un listado de tarjetas).
 */

/* Carga Autom√°tica:
Aseg√∫rate de que al cargar la p√°gina (por ejemplo, con el evento DOMContentLoaded), se muestren autom√°ticamente los contactos almacenados en localStorage.

- Eliminar Contactos:
Cada tarjeta debe tener un bot√≥n "Eliminar" que, al hacer clic, remueva ese contacto del array y actualice el localStorage y la vista en el DOM.
Validaciones y Estilo:

Realiza validaciones b√°sicas en el formulario (por ejemplo, que el campo de nombre no est√© vac√≠o).
Da estilos CSS a las tarjetas para que tengan un aspecto agradable y se adapten a diferentes tama√±os de pantalla.
Objetivo Final:
Al final, tu aplicaci√≥n deber√° permitir al usuario:

Agregar nuevos contactos mediante un formulario.
Visualizar todos los contactos guardados en una vista de tarjetas.
Eliminar cualquier contacto de la lista, actualizando el almacenamiento y la vista de forma din√°mica.

 */


// Verificar el local Storage al cargar el DOM y mostrar los datos si los hay
document.addEventListener("DOMContentLoaded", () => {
    let datosGuardados = JSON.parse(localStorage.getItem("contactos")) || [];
    mostrarDatos(datosGuardados);
});

//Definir el bot√≥n de crear un contacto y Definir el fomrulario
let contactoCrear = document.querySelector("#cardCreate");
let formulario = document.querySelector("#formulario");

//Interaci√≥n con el formulario
formulario.addEventListener("submit", (event) => {
    event.preventDefault();
    console.log("Se ha presionado el bot√≥n de 'Crear Contacto'");

    //Definir los valores recibidos
    let nombre = contactoNombre.value;
    let email = contactoEmail.value;
    let telefono = contactoTelefono.value;
    // console.log("Se ha recibido el contacto: " + nombre + " / " + email + " / " + telefono);

    //Confirmar el ingreso de los datos recibidos y guardarlos en una funci√≥n
    if (nombre && email && telefono) {

        // Enviar los datos recibidos a la funci√≥n guardarContacto
        guardarContacto(nombre, email, telefono);

        // limpiar los campos de input luego de enviar
        contactoNombre.value = ""
        contactoEmail.value = ""
        contactoTelefono.value = "";

        console.log("Esto da un true, por lo tanto han llegado los datos bien");
    } else {
        alert("Por Favor, ingrese un contacto valido");
    }

});


// Funci√≥n para almacenar los valores en el LocalStorage
function guardarContacto(nombre, email, telefono) {

    //Definir el nombre de la 'KEY' del localStorage y establecer que es un array vacio
    let contactos = JSON.parse(localStorage.getItem("contactos")) || [];

    //Creaci√≥n del objeto par el contacto
    let nuevoContacto = {
        nombre: nombre,
        email: email,
        telefono: telefono,
        fecha: new Date().toLocaleString(), // Fecha de creaci√≥n formateada
    }

    //Hacer un push del objeto al objeto JSon creado previamente (let contactos)
    contactos.push(nuevoContacto);
    localStorage.setItem("contactos", JSON.stringify(contactos));

    mostrarDatos(contactos);
}

//Funci√≥n para carcar los datos en el DOM
function mostrarDatos(contactos) {
    const card = document.getElementById("seccionContactos");
    card.innerHTML = ""; // Limpiar el <section> antes de agregar las cards

    contactos.forEach((contacto, index) => {
        let article = document.createElement("article");

        // Crear la estructura de la tarjeta
        article.innerHTML = `
        <header class="card__header">
            <span class="nombre-contacto">${contacto.nombre}</span>
            <button class="card_deleteButton" data-index="${index}">üóëÔ∏è</button>
        </header>
        <span>Email: ${contacto.email}</span>
        <footer>Tel√©fono: ${contacto.telefono}</footer>
         <footer>${contacto.fecha}</footer>
        `;

        // Truncar el nombre si es mayor a 30 caracteres
        let span = article.querySelector(".nombre-contacto");
        if (contacto.nombre.length > 23) {
            span.textContent = contacto.nombre.substring(0, 23) + "...";
        }

        console.log(contacto.nombre + " / " + contacto.email + " " + contacto.telefono);
        card.appendChild(article);

        //Evento para el bot√≥n eliminar
        document.querySelectorAll(".card_deleteButton").forEach(boton => {
            boton.addEventListener("click", (event) => {
                let index = event.target.dataset.index;
                eliminarContacto(index);
            });
        });

    });

}

//Funci√≥n para eliminar el contacto
function eliminarContacto(index) {
    let contactos = JSON.parse(localStorage.getItem("contactos")) || [];
    contactos.splice(index, 1);
    localStorage.setItem("contactos", JSON.stringify(contactos));

    mostrarDatos(contactos);
}

